using System;using System.Linq;using System.Threading;using System.Threading.Tasks;using System.Windows.Forms;using LiveChartsCore;using LiveChartsCore.SkiaSharpView;using Vault2Door.Models;
namespace Vault2Door{ public partial class Form1{
private async Task ToggleRealtimeButtonAsync(){ realtimeEnabled=!realtimeEnabled; btnRealtime.BackColor = realtimeEnabled? System.Drawing.Color.DodgerBlue : (isDarkMode? System.Drawing.Color.FromArgb(43,47,54): System.Drawing.Color.White); if(realtimeEnabled){ await LoadRealtimeAsync(); realTimer.Start(); } else { realTimer.Stop(); ShowChart(currentAsset.ToString().ToLowerInvariant()); providerBadge.Text="DEMO"; } }
private async Task ChangeRangeAsync(DataRange range){ currentRange=range; HighlightRangeButton(); if(realtimeEnabled) await LoadRealtimeAsync(); }
private async Task LoadRealtimeAsync(){ loadingBadge.Visible=true; try{ using var cts=new CancellationTokenSource(TimeSpan.FromSeconds(20)); var result=await new Services.RealtimeService().GetSeriesAsync(currentAsset,currentRange,cts.Token); var vals=result.Points.Select(p=>p.Value).ToArray(); if(currentAsset==AssetKind.Bronze) chart.Series=new ISeries[]{ new ColumnSeries<double>{ Values=vals, MaxBarWidth=double.NaN } }; else chart.Series=new ISeries[]{ new LineSeries<double>{ Values=vals, GeometrySize=0, LineSmoothness=0.5 } }; providerBadge.Text=$"{result.Provider}:{result.Symbol}".ToUpperInvariant(); ApplyChartAxesTheme(); } catch(Exception ex){ realTimer.Stop(); realtimeEnabled=false; btnRealtime.BackColor = isDarkMode? System.Drawing.Color.FromArgb(43,47,54): System.Drawing.Color.White; MessageBox.Show("Failed to load realtime data. Falling back to demo.\n\n"+ex.Message, "Realtime error", MessageBoxButtons.OK, MessageBoxIcon.Warning); providerBadge.Text="DEMO"; ShowChart(currentAsset.ToString().ToLowerInvariant()); } finally { loadingBadge.Visible=false; } }
} }